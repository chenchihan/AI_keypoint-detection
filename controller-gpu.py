# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtWidgets import *
import cv2
import os
import glob
import shutil
from torchvision.models.detection.rpn import AnchorGenerator
from torchvision.transforms import functional as F
from torchvision.transforms import transforms
from utils import collate_fn
import PIL.Image as Image
import torch.utils.data as data
import numpy as np
from torch.utils.data import Dataset, DataLoader
import torch.nn as nn
import torchvision
import torch
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1500, 1080)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton_folderchoose = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_folderchoose.setGeometry(QtCore.QRect(1170, 90, 120, 70))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_folderchoose.setFont(font)
        self.pushButton_folderchoose.setObjectName("pushButton_folderchoose")
        self.textBrowser_move = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_move.setGeometry(QtCore.QRect(1170, 230, 290, 60))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.textBrowser_move.setPalette(palette)
        self.textBrowser_move.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContentsOnFirstShow)
        self.textBrowser_move.setObjectName("textBrowser_move")
        self.pushButton_singlehand = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_singlehand.setGeometry(QtCore.QRect(1170, 300, 120, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_singlehand.setFont(font)
        self.pushButton_singlehand.setObjectName("pushButton_singlehand")
        self.pushButton_doublehand = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_doublehand.setGeometry(QtCore.QRect(1330, 300, 120, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_doublehand.setFont(font)
        self.pushButton_doublehand.setObjectName("pushButton_doublehand")
        self.textBrowser_control = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_control.setGeometry(QtCore.QRect(1170, 360, 290, 60))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.textBrowser_control.setPalette(palette)
        self.textBrowser_control.setObjectName("textBrowser_control")
        self.textBrowser_evhand = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_evhand.setGeometry(QtCore.QRect(1170, 430, 120, 70))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        self.textBrowser_evhand.setPalette(palette)
        self.textBrowser_evhand.setObjectName("textBrowser_evhand")
        self.textBrowser_keypoints = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_keypoints.setGeometry(QtCore.QRect(1170, 510, 120, 50))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        self.textBrowser_keypoints.setPalette(palette)
        self.textBrowser_keypoints.setObjectName("textBrowser_keypoints")
        self.textBrowser_keypointline = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_keypointline.setGeometry(QtCore.QRect(1170, 570, 120, 51))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        self.textBrowser_keypointline.setPalette(palette)
        self.textBrowser_keypointline.setObjectName("textBrowser_keypointline")
        self.textEdit_filepath = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_filepath.setGeometry(QtCore.QRect(1170, 20, 290, 60))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 170, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 127, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.textEdit_filepath.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.textEdit_filepath.setFont(font)
        self.textEdit_filepath.setObjectName("textEdit_filepath")
        self.radioButton_left = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_left.setGeometry(QtCore.QRect(1310, 450, 70, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.radioButton_left.setFont(font)
        self.radioButton_left.setObjectName("radioButton_left")
        self.radioButton_right = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_right.setGeometry(QtCore.QRect(1390, 450, 70, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.radioButton_right.setFont(font)
        self.radioButton_right.setChecked(True)
        self.radioButton_right.setObjectName("radioButton_right")
        self.textBrowser_sub = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_sub.setGeometry(QtCore.QRect(1170, 690, 290, 60))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        self.textBrowser_sub.setPalette(palette)
        self.textBrowser_sub.setObjectName("textBrowser_sub")
        self.textEdit_subvalue = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_subvalue.setGeometry(QtCore.QRect(1170, 760, 290, 120))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.textEdit_subvalue.setFont(font)
        self.textEdit_subvalue.setObjectName("textEdit_subvalue")
        self.pushButton_savedata = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_savedata.setGeometry(QtCore.QRect(1170, 960, 140, 75))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton_savedata.setFont(font)
        self.pushButton_savedata.setObjectName("pushButton_savedata")
        self.pushButton_exit = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_exit.setGeometry(QtCore.QRect(1320, 960, 140, 75))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton_exit.setFont(font)
        self.pushButton_exit.setObjectName("pushButton_exit")
        self.checkBox_kp = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_kp.setGeometry(QtCore.QRect(1350, 520, 70, 20))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.checkBox_kp.setFont(font)
        self.checkBox_kp.setChecked(True)
        self.checkBox_kp.setObjectName("checkBox_kp")
        self.horizontalSlider = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider.setGeometry(QtCore.QRect(1170, 890, 191, 40))
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(80, 10, 1024, 1024))
        self.label.setText("")
        self.label.setObjectName("label")
        self.textEdit_num = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_num.setGeometry(QtCore.QRect(1379, 890, 80, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.textEdit_num.setFont(font)
        self.textEdit_num.setObjectName("textEdit_num")
        self.pushButton_filechoose = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_filechoose.setGeometry(QtCore.QRect(1340, 90, 120, 70))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton_filechoose.setFont(font)
        self.pushButton_filechoose.setObjectName("pushButton_filechoose")
        self.checkBox_CLAHE = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_CLAHE.setGeometry(QtCore.QRect(1360, 180, 100, 25))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.checkBox_CLAHE.setFont(font)
        self.checkBox_CLAHE.setObjectName("checkBox_CLAHE")
        self.checkBox_lineL = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_lineL.setGeometry(QtCore.QRect(1310, 580, 70, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.checkBox_lineL.setFont(font)
        self.checkBox_lineL.setObjectName("checkBox_lineL")
        self.checkBox_lineR = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_lineR.setGeometry(QtCore.QRect(1390, 580, 70, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.checkBox_lineR.setFont(font)
        self.checkBox_lineR.setObjectName("checkBox_lineR")
        self.pushButton_axis = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_axis.setGeometry(QtCore.QRect(1260, 630, 120, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton_axis.setFont(font)
        self.pushButton_axis.setObjectName("pushButton_axis")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(1170, 170, 120, 50))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        self.textBrowser.setPalette(palette)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.textBrowser.setFont(font)
        self.textBrowser.setObjectName("textBrowser")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1500, 25))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_folderchoose.setText(_translate("MainWindow", "Choose Folder"))
        self.textBrowser_move.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'PMingLiU\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:16pt; font-weight:600;\">Movement assessment</span></p></body></html>"))
        self.pushButton_singlehand.setText(_translate("MainWindow", "Single hand"))
        self.pushButton_doublehand.setText(_translate("MainWindow", "Both Hand"))
        self.textBrowser_control.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'PMingLiU\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:16pt; font-weight:600;\">control options</span></p></body></html>"))
        self.textBrowser_evhand.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'PMingLiU\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt;\">Test Hand</span></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt;\">(Both Hand)</span></p></body></html>"))
        self.textBrowser_keypoints.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'PMingLiU\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt;\">Keypoints</span></p></body></html>"))
        self.textBrowser_keypointline.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'PMingLiU\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt;\">Evaluation line</span></p></body></html>"))
        self.textEdit_filepath.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'PMingLiU\'; font-size:14pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:16pt;\">File Path </span></p></body></html>"))
        self.radioButton_left.setText(_translate("MainWindow", "left"))
        self.radioButton_right.setText(_translate("MainWindow", "right"))
        self.textBrowser_sub.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'PMingLiU\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:20pt;\">Subluxation Value</span></p></body></html>"))
        self.textEdit_subvalue.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'PMingLiU\'; font-size:20pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.pushButton_savedata.setText(_translate("MainWindow", "Save Data"))
        self.pushButton_exit.setText(_translate("MainWindow", "Exit"))
        self.checkBox_kp.setText(_translate("MainWindow", "on"))
        self.textEdit_num.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'PMingLiU\'; font-size:12pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.pushButton_filechoose.setText(_translate("MainWindow", "Choose File"))
        self.checkBox_CLAHE.setText(_translate("MainWindow", "ON"))
        self.checkBox_lineL.setText(_translate("MainWindow", "left"))
        self.checkBox_lineR.setText(_translate("MainWindow", "right"))
        self.pushButton_axis.setText(_translate("MainWindow", "bar graph"))
        self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'PMingLiU\'; font-size:12pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt;\">image enhancement</span></p></body></html>"))


def test_dataset(img_root):
    imgs = []
    if os.path.isfile(img_root)==True:
        img = img_root
        imgs.append(img)
    else:
        FileNameList=glob.glob(img_root + "/*.jpg")
        if FileNameList==[]:
            FileNameList=glob.glob(img_root + "/*.png")
        FileNameList.sort(key=len)
        n = len(FileNameList)
        for i in range(n):
            img = FileNameList[i]
            imgs.append(img)
    return imgs

class TestDataset(Dataset):
    def __init__(self, img_root,transform=None, target_transform=None):
        imgs = test_dataset(img_root)
        self.imgs = imgs
        self.transform = transform
        self.target_transform = target_transform

    def __getitem__(self, index):
        img_path = self.imgs[index]
        img_x = Image.open(img_path)
        if self.transform is not None:
            img_x = self.transform(img_x)
        return img_x

    def __len__(self):
        return len(self.imgs)

def data_save(num,img_id,old_keypoints,path,keypoints=None,mood="csv"):
    if mood=="csv":
        if keypoints!=None:
            with open(path+'/'+str(num)+'.csv', 'w', encoding='UTF8', newline='') as f:
                writer = csv.writer(f)
                dis_list=[]
                for i in range(len(old_keypoints[0])):
                    dis=dist(old_keypoints[0][i],keypoints[0][i])
                    dis=round(dis, 2)
                    dis_list.append(dis)
                if len(old_keypoints[0])==5:
                    distan1=distanline(old_keypoints[0][0],old_keypoints[0][1],old_keypoints[0][2],old_keypoints[0][3])
                    distan2=distanline(keypoints[0][0],keypoints[0][1],keypoints[0][2],keypoints[0][3])
                    datas=['image-ID',str(img_id),'label_keypoint',old_keypoints[0],
                           'predict_keypoint',keypoints[0],
                           "distance",dis_list,"original_subluxation(%)",distan1,"predict_subluxation(%)",distan2]
                else:
                    distan1=distanline(old_keypoints[0][0],old_keypoints[0][1],old_keypoints[0][2],old_keypoints[0][3])
                    distan2=distanline(keypoints[0][0],keypoints[0][1],keypoints[0][2],keypoints[0][3])
                    distan3=distanline(old_keypoints[0][5],old_keypoints[0][6],old_keypoints[0][7],old_keypoints[0][8])
                    distan4=distanline(keypoints[0][5],keypoints[0][6],keypoints[0][7],keypoints[0][8])
                    datas=['image-ID',str(img_id),'label_keypoint',old_keypoints[0],
                    'predict_keypoint',keypoints[0],
                    "distance",dis_list,"right_original_subluxation(%)",distan1,"right_predict_subluxation(%)",distan2,
                    "left_original_subluxation(%)",distan3,"left_predict_subluxation(%)",distan4]
                for data in datas:
                    writer.writerow(data)
            f.close()
        else:
            with open(path+'/'+str(num)+'.csv', 'w', encoding='UTF8', newline='') as f:
                writer = csv.writer(f)
                if len(old_keypoints[0])==5:
                    distan1=distanline(old_keypoints[0][0],old_keypoints[0][1],old_keypoints[0][2],old_keypoints[0][3])
                    datas=['image-ID',str(img_id),'predict_keypoint',old_keypoints[0],
                    "predict_subluxation(%)",distan1]
                else:
                    distan1=distanline(old_keypoints[0][0],old_keypoints[0][1],old_keypoints[0][2],old_keypoints[0][3])
                    distan2=distanline(old_keypoints[0][5],old_keypoints[0][6],old_keypoints[0][7],old_keypoints[0][8])
                    datas=['image-ID',str(img_id),'predict_keypoint',old_keypoints[0],
                           "right_predict_subluxation(%)",distan1,
                           "left_predict_subluxation(%)",distan2]
                for data in datas:
                    writer.writerow(data)
            f.close()
    else:
        if keypoints!=None:
            file= open(path+'/'+str(num)+'.txt','w')
            dis_list=[]
            for i in range(len(old_keypoints[0])):
                dis=dist(old_keypoints[0][i],keypoints[0][i])
                dis=round(dis, 2)
                dis_list.append(dis)
            if len(old_keypoints[0])==5:
                distan1=distanline(old_keypoints[0][0],old_keypoints[0][1],old_keypoints[0][2],old_keypoints[0][3])
                distan2=distanline(keypoints[0][0],keypoints[0][1],keypoints[0][2],keypoints[0][3])
                datas=['image-ID',str(img_id),'label_keypoint',old_keypoints[0],
                        'predict_keypoint',keypoints[0],
                        "distance",dis_list,"original_subluxation(%)",distan1,"predict_subluxation(%)",distan2]
            else:
                distan1=distanline(old_keypoints[0][0],old_keypoints[0][1],old_keypoints[0][2],old_keypoints[0][3])
                distan2=distanline(keypoints[0][0],keypoints[0][1],keypoints[0][2],keypoints[0][3])
                distan3=distanline(old_keypoints[0][5],old_keypoints[0][6],old_keypoints[0][7],old_keypoints[0][8])
                distan4=distanline(keypoints[0][5],keypoints[0][6],keypoints[0][7],keypoints[0][8])
                datas=['image-ID',str(img_id),'label_keypoint',old_keypoints[0],
                       'predict_keypoint',keypoints[0],
                       "distance",dis_list,"right_original_subluxation(%)",distan1,"right_predict_subluxation(%)",distan2,
                       "left_original_subluxation(%)",distan3,"left_predict_subluxation(%)",distan4]
            for data in datas:
                file.write(str(data))
                file.write('\n')
            file.close()
        else:
            file= open(path+'/'+str(num)+'.txt','w')
            if len(old_keypoints[0])==[]:
                pass
            elif len(old_keypoints[0])==5:
                distan1=distanline(old_keypoints[0][0],old_keypoints[0][1],old_keypoints[0][2],old_keypoints[0][3])
                datas=['image-ID',str(img_id),'predict_keypoint',old_keypoints[0],
                       "predict_subluxation(%)",distan1]
            else:
                distan1=distanline(old_keypoints[0][0],old_keypoints[0][1],old_keypoints[0][2],old_keypoints[0][3])
                distan2=distanline(old_keypoints[0][5],old_keypoints[0][6],old_keypoints[0][7],old_keypoints[0][8])
                datas=['image-ID',str(img_id),'predict_keypoint',old_keypoints[0],
                        "right_predict_subluxation(%)",distan1,
                        "left_predict_subluxation(%)",distan2]
            for data in datas:
                file.write(str(data))
                file.write('\n')
            file.close()

def getLinearEquation(a,b):
    p1x=a[0]
    p1y=a[1]
    p2x=b[0]
    p2y=b[1]
    sign = 1
    a = p2y - p1y
    if a < 0:
        sign = -1
        a = sign * a
    b = sign * (p1x - p2x)
    c = sign * (p1y * p2x - p1x * p2y)
    return [a, b, c]

def point_distance_line(point,line_point1,line_point2):
	#计算向量
    vec1 = line_point1 - point
    vec2 = line_point2 - point
    distance = np.abs(np.cross(vec1,vec2)) / np.linalg.norm(line_point1-line_point2)
    return distance

def distanline(a,b,c,d):
    a=np.array(a)
    b=np.array(b)
    c=np.array(c)
    d=np.array(d)
    da=point_distance_line(c,a,b)
    db=point_distance_line(d,a,b)
    dc=da/db*100
    dc=round(dc, 2)
    return dc

def sub_sum(path,n):
    sub=[]
    mp1_list_path = glob.glob(path + "/*.txt")
    mp1_list_path.sort(key=len)
    for data in mp1_list_path:
        value=readFile(data, num=n,mood=2)
        for a in value:
            sub.append(a)
    return sub






def visualize(image,keypoints,path,keypoints2=None,num=None,name=None,color=(255,255,255)):
    fontsize = 10
    keypoints_classes_ids2names = {0: 'metacarpal-L', 1: 'metacarpal-R',2:"trapezium",3:"metacarpal-BL",4:"finger"}
    if keypoints2 !=None:
        for kps in keypoints:
            for idx, kp in enumerate(kps):
                image = cv2.circle(image.copy(), tuple(kp), 1,(255,255,255),1)
                # image = cv2.putText(image.copy(), " " + keypoints_classes_ids2names[idx], tuple(kp), cv2.FONT_HERSHEY_SIMPLEX, 2, (255,0,0), 3, cv2.LINE_AA)
            for kps2 in keypoints2:
                for idx, kp2 in enumerate(kps2):
                    image = cv2.circle(image.copy(), tuple(kp2), 1,color,1)
        filename=path+"/"+name+str(num)+'.png'
        cv2.imwrite(filename, image)
    else:
        for kps in keypoints:
            for idx, kp in enumerate(kps):
                image = cv2.circle(image.copy(), tuple(kp), 1,(255,255,255), 1)
                # image = cv2.putText(image.copy(), " " + keypoints_classes_ids2names[idx], tuple(kp), cv2.FONT_HERSHEY_SIMPLEX, 2, (255,0,0), 3, cv2.LINE_AA)
        filename=path+"/"+name+str(num)+'.png'
        cv2.imwrite(filename, image)

def visualline(image,keypoints,mood):
    img=np.array(Image.open(image).convert('RGB'))
    value=readFile(keypoints,num=3,mood=0)
    if mood==1:
        a,b,c=getLinearEquation((value[0],value[1]),(value[2],value[3]))
        c1=-a*value[4]-b*value[5]
        c2=-a*value[6]-b*value[7]
        c3=-a*value[8]-b*value[9]
        x1 =int(value[4]-30)
        x2=int(value[2]+50)
        y=int(-(a*x1+c)/b)
        y_2=int(-(a*x2+c)/b)
        im=cv2.line(img.copy(), (x1,y), (x2, y_2), (0, 0, 255), 1)
        y2=int(round(-(a*x1+c1)/b,0))
        y2_2=int(round(-(a*x2+c1)/b,0))
        im2=cv2.line(im.copy(), (x1, y2), (x2, y2_2), (255, 0, 0), 1)
        y3=int(round(-(a*x1+c2)/b,0))
        y3_2=int(round(-(a*x2+c2)/b,0))
        im3=cv2.line(im2.copy(), (x1, y3), (x2, y3_2), (0, 255, 0), 1)
        y4=int(round(-(a*x1+c3)/b,0))
        y4_2=int(round(-(a*x2+c3)/b,0))
        im_fin=cv2.line(im3.copy(), (x1, y4), (x2, y4_2), (255,255,0), 1)
    elif mood==2:
        a,b,c=getLinearEquation((value[10],value[11]),(value[12],value[13]))
        c1=-a*value[14]-b*value[15]
        c2=-a*value[16]-b*value[17]
        c3=-a*value[18]-b*value[19]
        x1 =int(value[14]-30)
        x2=int(value[12]+50)
        y=int(-(a*x1+c)/b)
        y_2=int(-(a*x2+c)/b)
        im=cv2.line(img.copy(), (x1,y), (x2, y_2), (0, 0, 255), 1)
        y2=int(round(-(a*x1+c1)/b,0))
        y2_2=int(round(-(a*x2+c1)/b,0))
        im2=cv2.line(im.copy(), (x1, y2), (x2, y2_2), (255, 0, 0), 1)
        y3=int(round(-(a*x1+c2)/b,0))
        y3_2=int(round(-(a*x2+c2)/b,0))
        im3=cv2.line(im2.copy(), (x1, y3), (x2, y3_2), (0, 255, 0), 1)
        y4=int(round(-(a*x1+c3)/b,0))
        y4_2=int(round(-(a*x2+c3)/b,0))
        im_fin=cv2.line(im3.copy(), (x1, y4), (x2, y4_2), (255,255,0), 1)
    else:
        a,b,c=getLinearEquation((value[0],value[1]),(value[2],value[3]))
        c1=-a*value[4]-b*value[5]
        c2=-a*value[6]-b*value[7]
        c3=-a*value[8]-b*value[9]
        x1 =int(value[4]-30)
        x2=int(value[2]+50)
        y=int(-(a*x1+c)/b)
        y_2=int(-(a*x2+c)/b)
        im=cv2.line(img.copy(), (x1,y), (x2, y_2), (0, 0, 255), 1)
        y2=int(round(-(a*x1+c1)/b,0))
        y2_2=int(round(-(a*x2+c1)/b,0))
        im2=cv2.line(im.copy(), (x1, y2), (x2, y2_2), (255, 0, 0), 1)
        y3=int(round(-(a*x1+c2)/b,0))
        y3_2=int(round(-(a*x2+c2)/b,0))
        im3=cv2.line(im2.copy(), (x1, y3), (x2, y3_2), (0, 255, 0), 1)
        y4=int(round(-(a*x1+c3)/b,0))
        y4_2=int(round(-(a*x2+c3)/b,0))
        im4=cv2.line(im3.copy(), (x1, y4), (x2, y4_2), (255,255,0), 1)
        #left
        a,b,c=getLinearEquation((value[10],value[11]),(value[12],value[13]))
        c1=-a*value[14]-b*value[15]
        c2=-a*value[16]-b*value[17]
        c3=-a*value[18]-b*value[19]
        x1 =int(value[14]-30)
        x2=int(value[12]+50)
        y=int(-(a*x1+c)/b)
        y_2=int(-(a*x2+c)/b)
        im5=cv2.line(im4.copy(), (x1,y), (x2, y_2), (0, 0, 255), 1)
        y2=int(round(-(a*x1+c1)/b,0))
        y2_2=int(round(-(a*x2+c1)/b,0))
        im6=cv2.line(im5.copy(), (x1, y2), (x2, y2_2), (255, 0, 0), 1)
        y3=int(round(-(a*x1+c2)/b,0))
        y3_2=int(round(-(a*x2+c2)/b,0))
        im7=cv2.line(im6.copy(), (x1, y3), (x2, y3_2), (0, 255, 0), 1)
        y4=int(round(-(a*x1+c3)/b,0))
        y4_2=int(round(-(a*x2+c3)/b,0))
        im_fin=cv2.line(im7.copy(), (x1, y4), (x2, y4_2), (255,255,0), 1)
    return im_fin



def readFile(fileName,num,mood=1):
        fileObj = open(fileName, "r") #opens the file in read mode
        words = fileObj.read().splitlines() #puts the file into an array
        if mood==1:
            a=words[num][1:-1].split(',')
            word=[float(aa) for aa in a]
        elif mood==2:
            a=words[num][0:].split(',')
            word=[float(aa) for aa in a]
        else:
            a=words[num][1:-1].split(',')
            lis=[]
            ch="[ ]"
            for i in range(len(a)):
                string = ''.join( x for x in a[i] if x not in ch)
                lis.append(string)
            word=[float(aa) for aa in lis]
        fileObj.close()
        return word

def valuemean(path):
    p1=[]
    p2=[]
    p3=[]
    p4=[]
    p5=[]
    mean=[]
    data_path = os.path.join(path)
    data_list_path = glob.glob(data_path + "/*.csv")
    num=len(data_list_path)
    for data in data_list_path:
        value=readFile(data, num=7,mood=0)
        pt1,pt2,pt3,pt4,pt5=value[0],value[1],value[2],value[3],value[4]
        m=sum(value)/len(value)
        p1.append(pt1)
        p2.append(pt2)
        p3.append(pt3)
        p4.append(pt4)
        p5.append(pt5)
        mean.append(m)
    p1_mean=round(sum(p1)/len(p1),2)
    p2_mean=round(sum(p2)/len(p2),2)
    p3_mean=round(sum(p3)/len(p3),2)
    p4_mean=round(sum(p4)/len(p4),2)
    p5_mean=round(sum(p5)/len(p5),2)
    mean_mean=round(sum(mean)/len(mean),2)
    file= open(path+'/'+'mean_loss.txt','w')
    datas=['metacarpal-L',p1_mean,'metacarpal-R',p2_mean,
           'trapezium',p3_mean,'metacarpal-BL',p4_mean,
           "index",p5_mean,'per_mean',mean_mean,
           'total_num',num]
    for data in datas:
        file.write(str(data))
        file.write('\n')
    file.close()
    return p1,p2,p3,p4,p5,mean,num




class ClassDataset(Dataset):
    def __init__(self,imgroot,annroot,demo=False):
        self.imgroot = imgroot
        self.annroot = annroot
        self.demo = demo # Use demo=True if you need transformed and original images (for example, for visualization purposes)
        imgs_file=os.listdir(imgroot)
        imgs_file.sort(key=lambda x:int(x.split('.')[0]))
        ann_file=os.listdir(annroot)
        ann_file.sort(key=lambda x:int(x.split('.')[0]))
        self.imgs_files = imgs_file
        self.annotations_files = ann_file

    def __getitem__(self, idx):
        img_path = os.path.join(self.imgroot,self.imgs_files[idx])
        annotations_path = os.path.join(self.annroot,self.annotations_files[idx])
        img_original = Image.open(img_path).convert('RGB')
        with open(annotations_path) as f:
            data_all = json.load(f)
            data=data_all['annotations']
            bboxes_original = data[0]['bbox']
            keypoints_original = data[0]['keypoints']
        img, bboxes, keypoints = img_original, bboxes_original, keypoints_original
        bboxes = torch.as_tensor(bboxes, dtype=torch.float32)
        target = {}
        target["boxes"] = bboxes
        target["labels"] = torch.as_tensor([1 for _ in bboxes], dtype=torch.int64) # all objects are glue tubes
        target["image_id"] = torch.tensor([idx])
        target["area"] = (bboxes[:, 3] - bboxes[:, 1]) * (bboxes[:, 2] - bboxes[:, 0])
        target["iscrowd"] = torch.zeros(len(bboxes), dtype=torch.int64)
        target["keypoints"] = torch.as_tensor(keypoints, dtype=torch.float32)
        img = F.to_tensor(img)


        return img, target

    def __len__(self):
        return len(self.imgs_files)






























def get_model(num_keypoints, weights_path=None):

    anchor_generator = AnchorGenerator(sizes=(32, 64, 128, 256, 512), aspect_ratios=(0.25, 0.5, 0.75, 1.0, 2.0, 3.0, 4.0))
    model = torchvision.models.detection.keypointrcnn_resnet50_fpn(pretrained=False,
                                                                   pretrained_backbone=True,
                                                                   num_keypoints=num_keypoints,
                                                                   num_classes = 2, # Background is the first class, object is the second class
                                                                   rpn_anchor_generator=anchor_generator
                                                                )

    if weights_path:
        state_dict = torch.load(weights_path)
        model.load_state_dict(state_dict)

    return model

class MainWindow_controller(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__() # in python3, super(Class, self).xxx = super().xxx
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setup_control()

    def setup_control(self):
        self.ui.pushButton_folderchoose.clicked.connect(self.open_folder)
        self.ui.pushButton_filechoose.clicked.connect(self.open_file)
        self.ui.pushButton_axis.clicked.connect(self.dataaxis)
        self.ui.pushButton_savedata.clicked.connect(self.datasave)
        self.ui.pushButton_exit.clicked.connect(self.dataexit)
        self.ui.horizontalSlider.valueChanged.connect(self.getslidervalue)
        self.ui.checkBox_CLAHE.stateChanged.connect(self.CLAHEClick)
        self.ui.pushButton_singlehand.clicked.connect(self.predict)
        self.ui.pushButton_doublehand.clicked.connect(self.predict2)
        self.ui.radioButton_left.toggled.connect(self.onClicked_left)
        self.ui.radioButton_right.toggled.connect(self.onClicked_right)
        self.ui.checkBox_kp.stateChanged.connect(self.KPClick)
        self.ui.checkBox_lineL.stateChanged.connect(self.lineClick)
        self.ui.checkBox_lineR.stateChanged.connect(self.lineClick)


    def open_folder(self):
        global sub,sub2,subvalue,img_files,img_file,F,path
        sub,sub2,subvalue,img_files,img_file,F,path=[],[],[],[],[],[],[]
        folder_path = QFileDialog.getExistingDirectory(self,
                  "Open folder",
                  "./")                 # start path
        self.ui.textEdit_filepath.setText(folder_path)
        if folder_path == '':
            self.ui.textEdit_filepath.setText("請選檔案")
        else:
            F=folder_path
            img_files=glob.glob(folder_path + "/*.jpg")
            if img_files==[]:
                img_files=glob.glob(folder_path + "/*.png")
            img_files.sort(key=len)
            img_path= img_files[0]
            img = cv2.imread(img_path)
            height, width, channel = img.shape
            qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
            self.ui.label.setPixmap(QPixmap.fromImage(qimg))



    def open_file(self):
        global sub,sub2,subvalue,img_files,img_file,F,path
        sub,sub2,subvalue,img_files,img_file,F,path=[],[],[],[],[],[],[]
        filename, filetype = QFileDialog.getOpenFileName(self,"Open file","./")
        if filename == '':
            self.ui.textEdit_filepath.setText("請選檔案")
        else:
            self.ui.textEdit_filepath.setText(filename)
            F=filename
            img = cv2.imread(filename)
            height, width, channel = img.shape
            qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
            self.ui.label.setPixmap(QPixmap.fromImage(qimg))
            img_file=filename



    def getslidervalue(self):
        F=self.ui.textEdit_filepath.toPlainText()
        if os.path.isfile(F)==True:
            img = cv2.imread(img_file)
            height, width, channel = img.shape
            qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
            self.ui.label.setPixmap(QPixmap.fromImage(qimg))
        elif F=='檔案路徑':
            self.ui.textEdit_num.setText(f"{self.ui.horizontalSlider.value()}")
        else:
            img_files.sort(key=len)
            n=len(img_files)
            self.ui.horizontalSlider.setMinimum(0)
            self.ui.horizontalSlider.setMaximum(n-1)
            self.ui.horizontalSlider.setSingleStep(1)
            self.ui.textEdit_num.setText(f"{self.ui.horizontalSlider.value()}")
            num=self.ui.horizontalSlider.value()
            if subvalue !=[]:
                self.ui.textEdit_subvalue.setText(str(subvalue[num]))
            else:
                self.ui.textEdit_subvalue.setText(' ')
            img_path= img_files[num]
            img = cv2.imread(img_path)
            height, width, channel = img.shape
            qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
            self.ui.label.setPixmap(QPixmap.fromImage(qimg))

    def onClicked_left(self,selected):
        global subvalue
        subvalue=[]
        radioButton = self.sender()
        if radioButton.isChecked():
            subvalue=sub2
        if len(sub2)==1:
            for s in sub2:
                s=s
            self.ui.textEdit_subvalue.setText(str(s))

    def onClicked_right(self,selected):
        global subvalue
        subvalue=[]
        radioButton = self.sender()
        if radioButton.isChecked():
            subvalue=sub
        if len(sub)==1:
            for s in sub:
                s=s
            self.ui.textEdit_subvalue.setText(str(s))

    def lineClick(self):
        global img_files,img_file
        if os.path.isfile(F)==True:
            p,n=os.path.split(F)
            if os.path.isdir(p+'/'+'line/')==True:
                shutil.rmtree(p+'/'+'line/')
            os.mkdir(p+'/'+'line/')
            path2=p+'/'+'line/'
        else:
            if os.path.isdir(F+'/'+'line/')==True:
                shutil.rmtree(F+'/'+'line/')
            os.mkdir(F+'/'+'line/')
            path2=F+'/'+'line/'

        if (self.ui.checkBox_lineR.checkState()==QtCore.Qt.Checked) and (self.ui.checkBox_lineL.checkState()==QtCore.Qt.Checked):
            predict_img=glob.glob(path + "/*.jpg")
            if predict_img==[]:
                predict_img=glob.glob(path + "/*.png")
            predict_img.sort(key=len)
            t=glob.glob(path + "/*.txt")
            t.sort(key=len)
            num=len(predict_img)
            for i in range(num):
                IM=visualline(predict_img[i],t[i],3)
                cv2.imwrite(path2+str(i)+'.png',IM)
            if num>1:
                img_files=glob.glob(path2 + "/*.jpg")
                if img_files==[]:
                    img_files=glob.glob(path2 + "/*.png")
                img_files.sort(key=len)
                img_path= img_files[0]
                img = cv2.imread(img_path)
                height, width, channel = img.shape
                qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
                self.ui.label.setPixmap(QPixmap.fromImage(qimg))
            else:
                img_file=path2 + "0.png"
                img = cv2.imread(img_file)
                height, width, channel = img.shape
                qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
                self.ui.label.setPixmap(QPixmap.fromImage(qimg))
        elif (self.ui.checkBox_lineL.checkState()==QtCore.Qt.Checked):
            predict_img=glob.glob(path + "/*.jpg")
            if predict_img==[]:
                predict_img=glob.glob(path + "/*.png")
            predict_img.sort(key=len)
            t=glob.glob(path + "/*.txt")
            t.sort(key=len)
            num=len(predict_img)
            for i in range(num):
                IM=visualline(predict_img[i],t[i],2)
                cv2.imwrite(path2+str(i)+'.png',IM)
            if num>1:
                img_files=glob.glob(path2 + "/*.jpg")
                if img_files==[]:
                    img_files=glob.glob(path2 + "/*.png")
                img_files.sort(key=len)
                img_path= img_files[0]
                img = cv2.imread(img_path)
                height, width, channel = img.shape
                qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
                self.ui.label.setPixmap(QPixmap.fromImage(qimg))
            else:
                img_file=path2 + "0.png"
                img = cv2.imread(img_file)
                height, width, channel = img.shape
                qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
                self.ui.label.setPixmap(QPixmap.fromImage(qimg))
        elif (self.ui.checkBox_lineR.checkState()==QtCore.Qt.Checked):
            predict_img=glob.glob(path + "/*.jpg")
            if predict_img==[]:
                predict_img=glob.glob(path + "/*.png")
            predict_img.sort(key=len)
            t=glob.glob(path + "/*.txt")
            t.sort(key=len)
            num=len(predict_img)
            for i in range(num):
                IM=visualline(predict_img[i],t[i],1)
                cv2.imwrite(path2+str(i)+'.png',IM)
            if num>1:
                img_files=glob.glob(path2 + "/*.jpg")
                if img_files==[]:
                    img_files=glob.glob(path2 + "/*.png")
                img_files.sort(key=len)
                img_path= img_files[0]
                img = cv2.imread(img_path)
                height, width, channel = img.shape
                qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
                self.ui.label.setPixmap(QPixmap.fromImage(qimg))
            else:
                img_file=path2 + "0.png"
                img = cv2.imread(img_file)
                height, width, channel = img.shape
                qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
                self.ui.label.setPixmap(QPixmap.fromImage(qimg))
        else:
            if os.path.isfile(F)==True:
                img_file=path+'predict_0'+'.png'
                img = cv2.imread(img_file)
                height, width, channel = img.shape
                qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
                self.ui.label.setPixmap(QPixmap.fromImage(qimg))
            else:
                img_files=glob.glob(path + "/*.png")
                img_files.sort(key=len)
                img_path= img_files[0]
                img = cv2.imread(img_path)
                height, width, channel = img.shape
                qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
                self.ui.label.setPixmap(QPixmap.fromImage(qimg))


    def KPClick(self,state):
        global img_file,img_files,subvalue
        if (QtCore.Qt.Checked == state):
            if os.path.isfile(F)==True:
                p,n=os.path.split(F)
                path=p+'/'+'predict/'
                img_file=path+'predict_0'+'.png'
                img = cv2.imread(img_file)
                height, width, channel = img.shape
                qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
                self.ui.label.setPixmap(QPixmap.fromImage(qimg))
            else:
                path=F+'/'+'predict/'
                img_files=glob.glob(path + "/*.png")
                img_files.sort(key=len)
                img_path= img_files[0]
                img = cv2.imread(img_path)
                height, width, channel = img.shape
                qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
                self.ui.label.setPixmap(QPixmap.fromImage(qimg))
        else:
            if (self.ui.checkBox_CLAHE.checkState()==QtCore.Qt.Checked):
                if os.path.isfile(F)==True:
                    p,n=os.path.split(F)
                    img = cv2.imread(p+'/'+'CLAHE/'+n)
                    height, width, channel = img.shape
                    qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
                    self.ui.label.setPixmap(QPixmap.fromImage(qimg))
                    img_file=F
                    subvalue=[]
                else:
                    subvalue=[]
                    img_files=glob.glob(F+'/'+'CLAHE/' + "/*.jpg")
                    if img_files==[]:
                        img_files=glob.glob(F+'/'+'CLAHE/'+ "/*.png")
                    img_files.sort(key=len)
                    img_path= img_files[0]
                    img = cv2.imread(img_path)
                    height, width, channel = img.shape
                    qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
                    self.ui.label.setPixmap(QPixmap.fromImage(qimg))
            else:
                if os.path.isfile(F)==True:
                    img = cv2.imread(F)
                    height, width, channel = img.shape
                    qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
                    self.ui.label.setPixmap(QPixmap.fromImage(qimg))
                    img_file=F
                    subvalue=[]
                else:
                    subvalue=[]
                    img_files=glob.glob(F + "/*.jpg")
                    if img_files==[]:
                        img_files=glob.glob(F + "/*.png")
                    img_files.sort(key=len)
                    img_path= img_files[0]
                    img = cv2.imread(img_path)
                    height, width, channel = img.shape
                    qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
                    self.ui.label.setPixmap(QPixmap.fromImage(qimg))




    def CLAHEClick(self,state):
        global img_file,img_files,subvalue
        if (QtCore.Qt.Checked == state):
            if os.path.isfile(F)==True:
                p,n=os.path.split(F)
                if os.path.isdir(p+'/'+'CLAHE/')==True:
                    shutil.rmtree(p+'/'+'CLAHE/')
                os.mkdir(p+'/'+'CLAHE/')
                img = cv2.imread(F,0)
                # create a CLAHE object
                img= cv2.resize(img, (1024, 1024), interpolation=cv2.INTER_AREA)
                clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8,8))
                cl1 = clahe.apply(img)
                cv2.imwrite(p+"\\"+'CLAHE/'+n,cl1)
                img2 = cv2.imread(p+"\\"+'CLAHE/'+n)
                height,width,channel = img2.shape
                qimg = QImage(img2, width, height, QImage.Format_RGB888).rgbSwapped()
                self.ui.label.setPixmap(QPixmap.fromImage(qimg))
                img_file=(p+"\\"+'CLAHE/'+n)
            else:
                if os.path.isdir(F+'/'+'CLAHE/')==True:
                    shutil.rmtree(F+'/'+'CLAHE/')
                FileNameList=glob.glob(F + "/*.jpg")
                if FileNameList==[]:
                    FileNameList=glob.glob(F + "/*.png")
                FileNameList.sort(key=len)
                os.mkdir(F+'/'+'CLAHE/')
                for z in range(len(FileNameList)):
                    root_file =FileNameList[z]
                    img = cv2.imread(root_file, 0)
                    img= cv2.resize(img, (1024, 1024), interpolation=cv2.INTER_AREA)
                    # create a CLAHE object
                    clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8,8))
                    cl1 = clahe.apply(img)
                    cv2.imwrite(F+"\\"+'CLAHE\\'+str(z)+'.jpg',cl1)
                img_files=glob.glob(F+"/"+'CLAHE/'+ "/*.jpg")
                img_files.sort(key=len)
                img_path= img_files[0]
                img = cv2.imread(img_path)
                height, width,channel = img.shape
                qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
                self.ui.label.setPixmap(QPixmap.fromImage(qimg))
        else:
            if os.path.isfile(F)==True:
                p,n=os.path.split(F)
                if os.path.isdir(p+'/'+'CLAHE/')==True:
                    shutil.rmtree(p+'/'+'CLAHE/')
                img = cv2.imread(F)
                height, width, channel = img.shape
                qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
                self.ui.label.setPixmap(QPixmap.fromImage(qimg))
                img_file=F
            else:
                if os.path.isdir(F+'/'+'CLAHE/')==True:
                    shutil.rmtree(F+'/'+'CLAHE/')
                img_files=glob.glob(F + "/*.jpg")
                if img_files==[]:
                    img_files=glob.glob(F + "/*.png")
                img_files.sort(key=len)
                img_path= img_files[0]
                img = cv2.imread(img_path)
                height, width, channel = img.shape
                qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
                self.ui.label.setPixmap(QPixmap.fromImage(qimg))

    def predict(self):
        global img_file,img_files,subvalue,sub,path
        subvalue,sub,sub2=[],[],[]
        train_transforms=transforms.ToTensor()
        model = get_model(num_keypoints = 5,weights_path="5keypointsrcnn.pt")
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        model=model.to(device)
        if (self.ui.checkBox_CLAHE.checkState()==QtCore.Qt.Checked):
            if os.path.isfile(F)==True:
                p,n=os.path.split(F)
                test_dataset = TestDataset(img_root=p+'/'+'CLAHE/',transform=train_transforms)
                dataloaders = DataLoader(dataset=test_dataset, batch_size=1,shuffle=False, collate_fn=collate_fn)
            else:
                test_dataset = TestDataset(img_root=F+'/'+'CLAHE/',transform=train_transforms)
                dataloaders = DataLoader(dataset=test_dataset, batch_size=1,shuffle=False, collate_fn=collate_fn)
        else:
            if os.path.isfile(F)==True:
                p,n=os.path.split(F)
                test_dataset = TestDataset(img_root=F,transform=train_transforms)
                dataloaders = DataLoader(dataset=test_dataset, batch_size=1,shuffle=False, collate_fn=collate_fn)
            else:
                test_dataset = TestDataset(img_root=F,transform=train_transforms)
                dataloaders = DataLoader(dataset=test_dataset, batch_size=1,shuffle=False, collate_fn=collate_fn)
        if os.path.isfile(F)==True:
            p,n=os.path.split(F)
            if os.path.isdir(p+'/'+'predict/')==True:
                shutil.rmtree(p+'/'+'predict/')
            os.mkdir(p+'/'+'predict/')
            path=p+'/'+'predict/'
        else:
            if os.path.isdir(F+'/'+'predict/')==True:
                shutil.rmtree(F+'/'+'predict/')
            os.mkdir(F+'/'+'predict/')
            path=F+'/'+'predict/'
        with torch.no_grad():
            for i,x in enumerate(dataloaders):
                model.eval()
                images=list(torch.stack(list(image)).to(device) for image in x)
                output = model(images)
                image = (images[0].permute(1,2,0).detach().cpu().numpy() * 255).astype(np.uint8)
                scores = output[0]['scores'].detach().cpu().numpy()
                high_scores_idxs = np.where(scores > 0.7)[0].tolist() # Indexes of boxes with scores > 0.7
                post_nms_idxs = torchvision.ops.nms(output[0]['boxes'][high_scores_idxs], output[0]['scores'][high_scores_idxs], 0.3).cpu().numpy()
                keypoints = []
                for kps in output[0]['keypoints'][high_scores_idxs][post_nms_idxs].detach().cpu().numpy():
                    keypoints.append([list(map(int, kp[:2])) for kp in kps])
                if keypoints ==[]:
                    for kps in output[0]['keypoints'].detach().cpu().numpy():
                        keypoints.append([list(map(int, kp[:2])) for kp in kps])
                visualize(image,keypoints=keypoints,path=path,num=i,name='predict_')
                data_save(num=i,img_id=i,old_keypoints=keypoints,path=path,mood='txt')
        if os.path.isfile(F)==True:
            img_file=path+'predict_0'+'.png'
            img = cv2.imread(img_file)
            height, width, channel = img.shape
            qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
            self.ui.label.setPixmap(QPixmap.fromImage(qimg))
            sub=sub_sum(path,5)
            self.ui.textEdit_subvalue.setText(str(sub[0]))
            subvalue=sub
        else:
            img_files=glob.glob(path + "/*.png")
            img_files.sort(key=len)
            img_path= img_files[0]
            img = cv2.imread(img_path)
            height, width, channel = img.shape
            qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
            self.ui.label.setPixmap(QPixmap.fromImage(qimg))
            sub=sub_sum(path,5)
            self.ui.textEdit_subvalue.setText(str(sub[0]))
            subvalue=sub
        QMessageBox.information(None, 'my messagebox', 'finish')

    def predict2(self):
        global img_file,img_files,subvalue,sub,sub2,path
        subvalue,sub,sub2=[],[],[]
        train_transforms=transforms.ToTensor()
        model = get_model(num_keypoints = 10,weights_path="10keypointsrcnn.pt")
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        model=model.to(device)
        if (self.ui.checkBox_CLAHE.checkState()==QtCore.Qt.Checked):
            if os.path.isfile(F)==True:
                p,n=os.path.split(F)
                test_dataset = TestDataset(img_root=p+'/'+'CLAHE/',transform=train_transforms)
                dataloaders = DataLoader(dataset=test_dataset, batch_size=1,shuffle=False, collate_fn=collate_fn)
            else:
                test_dataset = TestDataset(img_root=F+'/'+'CLAHE/',transform=train_transforms)
                dataloaders = DataLoader(dataset=test_dataset, batch_size=1,shuffle=False, collate_fn=collate_fn)
        else:
            if os.path.isfile(F)==True:
                p,n=os.path.split(F)
                test_dataset = TestDataset(img_root=F,transform=train_transforms)
                dataloaders = DataLoader(dataset=test_dataset, batch_size=1,shuffle=False, collate_fn=collate_fn)
            else:
                test_dataset = TestDataset(img_root=F,transform=train_transforms)
                dataloaders = DataLoader(dataset=test_dataset, batch_size=1,shuffle=False, collate_fn=collate_fn)
        if os.path.isfile(F)==True:
            p,n=os.path.split(F)
            if os.path.isdir(p+'/'+'predict/')==True:
                shutil.rmtree(p+'/'+'predict/')
            os.mkdir(p+'/'+'predict/')
            path=p+'/'+'predict/'
        else:
            if os.path.isdir(F+'/'+'predict/')==True:
                shutil.rmtree(F+'/'+'predict/')
            os.mkdir(F+'/'+'predict/')
            path=F+'/'+'predict/'
        with torch.no_grad():
            for i,x in enumerate(dataloaders):
                model.eval()
                images=list(torch.stack(list(image)).to(device) for image in x)
                # images=list(image.cpu() for image in images)
                output = model(images)
                image = (images[0].permute(1,2,0).detach().cpu().numpy() * 255).astype(np.uint8)
                scores = output[0]['scores'].detach().cpu().numpy()
                high_scores_idxs = np.where(scores > 0.7)[0].tolist() # Indexes of boxes with scores > 0.7
                post_nms_idxs = torchvision.ops.nms(output[0]['boxes'][high_scores_idxs], output[0]['scores'][high_scores_idxs], 0.3).cpu().numpy()
                keypoints = []
                for kps in output[0]['keypoints'][high_scores_idxs][post_nms_idxs].detach().cpu().numpy():
                    keypoints.append([list(map(int, kp[:2])) for kp in kps])
                if keypoints ==[]:
                    for kps in output[0]['keypoints'].detach().cpu().numpy():
                        keypoints.append([list(map(int, kp[:2])) for kp in kps])
                visualize(image,keypoints=keypoints,path=path,num=i,name='predict_')
                data_save(num=i,img_id=i,old_keypoints=keypoints,path=path,mood='txt')
        if os.path.isfile(F)==True:
            img_file=path+'predict_0'+'.png'
            img = cv2.imread(img_file)
            height, width, channel = img.shape
            qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
            self.ui.label.setPixmap(QPixmap.fromImage(qimg))
            sub=sub_sum(path,5)
            sub2=sub_sum(path,7)
            self.ui.textEdit_subvalue.setText(str(sub[0]))
            subvalue=sub
        else:
            img_files=glob.glob(path + "/*.png")
            img_files.sort(key=len)
            img_path= img_files[0]
            img = cv2.imread(img_path)
            height, width, channel = img.shape
            qimg = QImage(img, width, height, QImage.Format_RGB888).rgbSwapped()
            self.ui.label.setPixmap(QPixmap.fromImage(qimg))
            sub=sub_sum(path,5)
            sub2=sub_sum(path,7)
            self.ui.textEdit_subvalue.setText(str(sub[0]))
            subvalue=sub
        QMessageBox.information(None, 'my messagebox', 'finish')

    def datasave(self):
        folder_path = QFileDialog.getExistingDirectory(self,
                  "Open folder",
                  "./")
        if len(sub)==1:
            n=(50)
        elif len(sub)==11:
            n=range(0,110,10)
        else:
            n=range(0,len(sub),1)
        file= open(folder_path+'/'+'datasave.txt','w')
        if sub2 !=[]:
            file.write('righthand_subluxation')
            file.write('\n')
            for data in sub:
                file.write(str(data))
                file.write('\n')
            file.write('lefthand_subluxation')
            file.write('\n')
            for data2 in sub2:
                file.write(str(data2))
                file.write('\n')
            img=plt.plot(n,sub,marker='o', color='r')
            plt.title("right hand subluxation")
            plt.ylabel("subluxation(%)")
            plt.xlabel("Force(%)")
            plt.savefig(folder_path+'/'+'right_hand.png')
            plt.clf()
            img2=plt.plot(n,sub2,marker='o', color='r')
            plt.title("left hand subluxation")
            plt.ylabel("subluxation(%)")
            plt.xlabel("Force(%)")
            plt.savefig(folder_path+'/'+'left_hand.png')
            plt.clf()
        else:
            file.write('singlehand_subluxation')
            file.write('\n')
            for data in sub:
                file.write(str(data))
                file.write('\n')
            img=plt.plot(n,sub,marker='o', color='r')
            plt.title("singlehand subluxation")
            plt.ylabel("subluxation(%)")
            plt.xlabel("Force(%)")
            plt.savefig(folder_path+'/'+'singlehand.png')
            plt.clf()
        file.close()
        QMessageBox.information(None, 'my messagebox', 'finish')

    def dataexit(self):
        if F in globals():
            del sub,sub2,subvalue,img_files,img_file,F,path
        os._exit(0)

    def dataaxis(self):
        self.chile_Win = Mytest()
        self.chile_Win.show()











class Figure_Canvas(FigureCanvas):   # 通过继承FigureCanvas类，使得该类既是一个PyQt5的Qwidget，又是一个matplotlib的FigureCanvas，这是连接pyqt5与matplot lib的关键

    def __init__(self, parent=None, width=11, height=5, dpi=100):
        fig = Figure(figsize=(width, height))  # 创建一个Figure，注意：该Figure为matplotlib下的figure，不是matplotlib.pyplot下面的figure

        FigureCanvas.__init__(self, fig) # 初始化父类
        self.setParent(parent)
        self.axes = fig.add_subplot(121) # 调用figure下面的add_subplot方法，类似于matplotlib.pyplot下面的subplot方法
        self.axes2 = fig.add_subplot(122)


    def test(self):
        if len(sub)==1:
            n=5
            n1=range(0,10,1)
        elif len(sub)==11:
            n1=n=range(0,110,10)
        else:
            n1=n=range(0,len(sub),1)
        if sub2 !=[]:
            self.axes.cla()
            self.axes2.cla()
            self.axes.plot(n,sub,marker='o', color='r')
            self.axes.set_title("right hand subluxation")
            self.axes.set_ylabel("subluxation(%)")
            self.axes.set_xlabel("Force(%)")
            self.axes.set_xticks(n1)
            self.axes.set_xticklabels(n1,rotation=45)
            self.axes2.plot(n,sub2,marker='o', color='r')
            self.axes2.set_title("left hand subluxation")
            self.axes2.set_ylabel("subluxation(%)")
            self.axes2.set_xlabel("Force(%)")
            self.axes2.set_xticks(n1)
            self.axes2.set_xticklabels(n1,rotation=45)
        else:
            self.axes.cla()
            self.axes2.cla()
            self.axes.plot(n,sub,marker='o', color='r')
            self.axes.set_title("single hand subluxation")
            self.axes.set_ylabel("subluxation(%)")
            self.axes.set_xlabel("Force(%)")
            self.axes.set_xticks(n1)
            self.axes.set_xticklabels(n1,rotation=45)

class Mytest(QMainWindow):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # 设置窗口标题
        self.setWindowTitle('條狀圖')
        self.setFixedSize(1024, 1024)
        # ===通过graphicview来显示图形
        self.graphicview = QtWidgets.QGraphicsView()  # 第一步，创建一个QGraphicsView
        self.graphicview.setObjectName("graphicview")

        dr = Figure_Canvas()
        #实例化一个FigureCanvas
        dr.test()  # 画图
        graphicscene = QtWidgets.QGraphicsScene()  # 第三步，创建一个QGraphicsScene，因为加载的图形（FigureCanvas）不能直接放到graphicview控件中，必须先放到graphicScene，然后再把graphicscene放到graphicview中
        graphicscene.addWidget(dr)  # 第四步，把图形放到QGraphicsScene中，注意：图形是作为一个QWidget放到QGraphicsScene中的
        self.graphicview.setScene(graphicscene)  # 第五步，把QGraphicsScene放入QGraphicsView
        self.graphicview.show()  # 最后，调用show方法呈现图形！Voila!!
        self.setCentralWidget(self.graphicview)
        self.graphicview.setFixedSize(1024, 1024)



if __name__ == '__main__':
    import sys
    app = QtWidgets.QApplication(sys.argv)
    window = MainWindow_controller()
    window.show()
    sys.exit(app.exec_())

